import sys

hashMap = [
   [0xf, 0x7, 0x6, 0x4, 0x5, 0x1, 0x0, 0x2, 0x3, 0xb, 0xa, 0x8, 0x9, 0xd, 0xc, 0xe],
   [0x2, 0x3, 0xb, 0xa, 0x8, 0x9, 0xd, 0xc, 0xe, 0xf, 0x7, 0x6, 0x4, 0x5, 0x1, 0x0],
   [0x6, 0x4, 0x5, 0x1, 0x0, 0x2, 0x3, 0xb, 0xa, 0x8, 0x9, 0xd, 0xc, 0xe, 0xf, 0x7],
   [0x8, 0x9, 0xd, 0xc, 0xe, 0xf, 0x7, 0x6, 0x4, 0x5, 0x1, 0x0, 0x2, 0x3, 0xb, 0xa],
   [0x5, 0x1, 0x0, 0x2, 0x3, 0xb, 0xa, 0x8, 0x9, 0xd, 0xc, 0xe, 0xf, 0x7, 0x6, 0x4],
   [0xb, 0xa, 0x8, 0x9, 0xd, 0xc, 0xe, 0xf, 0x7, 0x6, 0x4, 0x5, 0x1, 0x0, 0x2, 0x3],
   [0x0, 0x2, 0x3, 0xb, 0xa, 0x8, 0x9, 0xd, 0xc, 0xe, 0xf, 0x7, 0x6, 0x4, 0x5, 0x1],
   [0x7, 0x6, 0x4, 0x5, 0x1, 0x0, 0x2, 0x3, 0xb, 0xa, 0x8, 0x9, 0xd, 0xc, 0xe, 0xf],
   [0x3, 0xb, 0xa, 0x8, 0x9, 0xd, 0xc, 0xe, 0xf, 0x7, 0x6, 0x4, 0x5, 0x1, 0x0, 0x2],
   [0x1, 0x0, 0x2, 0x3, 0xb, 0xa, 0x8, 0x9, 0xd, 0xc, 0xe, 0xf, 0x7, 0x6, 0x4, 0x5],
   [0xa, 0x8, 0x9, 0xd, 0xc, 0xe, 0xf, 0x7, 0x6, 0x4, 0x5, 0x1, 0x0, 0x2, 0x3, 0xb],
   [0x4, 0x5, 0x1, 0x0, 0x2, 0x3, 0xb, 0xa, 0x8, 0x9, 0xd, 0xc, 0xe, 0xf, 0x7, 0x6],
   [0x9, 0xd, 0xc, 0xe, 0xf, 0x7, 0x6, 0x4, 0x5, 0x1, 0x0, 0x2, 0x3, 0xb, 0xa, 0x8],
   [0xd, 0xc, 0xe, 0xf, 0x7, 0x6, 0x4, 0x5, 0x1, 0x0, 0x2, 0x3, 0xb, 0xa, 0x8, 0x9],
   [0xc, 0xe, 0xf, 0x7, 0x6, 0x4, 0x5, 0x1, 0x0, 0x2, 0x3, 0xb, 0xa, 0x8, 0x9, 0xd],
   [0xe, 0xf, 0x7, 0x6, 0x4, 0x5, 0x1, 0x0, 0x2, 0x3, 0xb, 0xa, 0x8, 0x9, 0xd, 0xc]
];

upperMask = 0xF0
lowerMask = 0x0F

def buildSequenceFromLetter(letter, matrix):
    

def findIndicesOfLetterReoccurence(letter, matrix, i):
    indices = []
    for i in range(i, len(matrix)):
        if letter in matrix[i]:
            indices.append(i)
    return indices

def findCandidateLetters(matrix):
    for i in range(len(matrix)):
        row = matrix[i]
        for letter in row:
            indices = findIndicesOfLetterReoccurence(letter, matrix, i)
            print letter, indices

def encrypt(character, key_character):
    binary_char = ord(character)
    binary_key = ord(key_character)
    ph = (binary_char & 0xF0) >> 4
    pl = binary_char & 0x0F
    kh = (binary_key & 0xF0) >> 4
    kl = binary_key & 0x0F
    mapped = hashMap[ph][kl] << 4 | hashMap[pl][kh]
    return mapped

def findIndices2dArray(arr, item):
    matching = []
    for p in range(len(arr)):
        for k in range(len(arr[0])):
            if (arr[p][k] == item):
                matching.append((p, k))
    return matching

def isPrintableAscii(hex):
    return hex >= 32 and hex < 127

def isValidAscii(hex):
    return hex >= 0 and hex <= 127

def main():
    for line in sys.stdin:
        normal = []
        possibleKeyMatrix = []
        possibleCiphertextMatrix = []
        for byte in line:
            ch = (ord(byte) & upperMask) >> 4
            cl = ord(byte) & lowerMask
            ch_indices = findIndices2dArray(hashMap, ch)
            cl_indices = findIndices2dArray(hashMap, cl)
            possibleKeyCharacterVector = []
            possibleCiphertextVector = []
            for pl, kh in cl_indices:
                for ph, kl in ch_indices:
                    if isPrintableAscii(ph << 4 | pl) and isValidAscii(kh << 4 | kl):
                        possibleCiphertextVector.append(chr(ph << 4 | pl))
                        possibleKeyCharacterVector.append(chr(kh << 4 | kl))

            possibleKeyMatrix.append(possibleKeyCharacterVector)
            possibleCiphertextMatrix.append(possibleCiphertextVector)

    findCandidateLetters(possibleKeyMatrix)

main()
